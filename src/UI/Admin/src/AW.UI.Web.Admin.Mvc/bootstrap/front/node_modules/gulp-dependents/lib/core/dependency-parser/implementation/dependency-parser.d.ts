import File from "vinyl";
import { IDependencyParser } from "../dependency-parser";
/**
 * Represents the default configuration for the dependency tracker, specifying
 * how dependencies should be parsed from each of the supported file types.
 */
export declare const defaultConfig: {
    ".pcss": {
        postfixes: string[];
        parserSteps: RegExp[];
    };
    ".less": {
        parserSteps: RegExp[];
        prefixes: any[];
        postfixes: string[];
        basePaths: any[];
    };
    ".scss": {
        parserSteps: RegExp[];
        prefixes: string[];
        postfixes: string[];
        basePaths: any[];
    };
    ".sass": {
        parserSteps: RegExp[];
        prefixes: string[];
        postfixes: string[];
        basePaths: any[];
    };
};
/**
 * Represents a parser that extracts dependency file paths from a file.
 */
export declare class DependencyParser implements IDependencyParser {
    /**
     * The configuration describing how files should be parsed.
     */
    config: {};
    /**
     * Creates a new instance of the type.
     * @param config The configuration to merge with the default configuration.
     */
    constructor(config?: {});
    /**
     * Parses the specified file, returning the set of dependency file paths on which it depends.
     * @param file The file for which dependencies should be returned.
     * @param encoding The name of the encoding used in the file.
     * @return The set of file paths on which the file depends.
     */
    getDependencyFilePaths(file: File, encoding: string): string[];
    /**
     * Parses the specified file, returning the set of paths specified in its dependency statements.
     * Note that those are not yet valid file paths, as prefixes and postfixes may be missing.
     * @param file The file for which dependency paths should be returned.
     * @param config The parser config for the file type being parsed.
     * @return The set of paths specified in the files dependency statements.
     */
    private parseFile;
    /**
     * Applies the specified RegExp or function to each of the specified texts, aggregating all the captured
     * values into a single list.
     * @param texts The texts against which the RegExp or function should be executed.
     * @param regExpOrFunc The RegExp or function to be executed. If the parameter is a RegExp, it must have
     * a single capture group representing the string to be matched. If the parameter is a function, it must
     * accept a string and return an array of matched strings.
     * @return An array containing all the matches found in all the texts.
     */
    private getMatches;
    /**
     * Applies the prefixes in the specified config to the specified paths, returning the resulting set of path variants.
     * @param dependencyPaths The dependency paths for which variants should be returned.
     * @param config The parser config for the file type being parsed.
     * @return A list of prefixed path variants.
     */
    private getPrefixedPathVariants;
    /**
     * Applies the postfixes in the specified config to the specified paths, returning the resulting set of path variants.
     * @param dependencyPaths The dependency paths for which variants should be returned.
     * @param config The parser config for the file type being parsed.
     * @return A list of path variants, with default file names appended to each folder path.
     */
    private getPostfixedPathVariants;
    /**
     * Applies the alternate base paths in the specified config to the specified paths, returning the resulting set of path variants.
     * @param dependencyPaths The dependency paths for which variants should be returned.
     * @param config The parser config for the file type being parsed.
     * @return A list of postfixed path variants.
     */
    private getBasePathVariants;
    /**
     * Applies the specified configuration by merging it into the current configuration.
     * @param config The configuration to merge with the current configuration.
     */
    private applyConfig;
}
