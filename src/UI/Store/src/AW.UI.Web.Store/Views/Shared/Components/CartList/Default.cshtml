@model AW.UI.Web.Store.ViewModels.Cart.Basket

@{
    ViewData["Title"] = "My Cart";
}

<div class="container ml-2">
    @if (ViewBag.BasketInoperativeMsg != null)
    {
        <br />
        <div class="alert alert-warning" role="alert">
            &nbsp;@ViewBag.BasketInoperativeMsg
        </div>
    }
    else
    {
        <form asp-area="" asp-controller="Cart" asp-action="Index" method="post">
            <article class="basket-titles row">
                <br />
                @if (ViewBag.BasketInoperativeMsg != null)
                {
                    <div class="alert alert-warning" role="alert">
                        &nbsp;@ViewBag.BasketInoperativeMsg
                    </div>
                }

                <section class="basket-title col-3">Product</section>
                <section class="basket-title col-3 hidden-lg-down"></section>
                <section class="basket-title col-2">Price</section>
                <section class="basket-title col-2">Quantity</section>
                <section class="basket-title col-2">Cost</section>
            </article>

            @for (int i = 0; i < Model.Items.Count; i++)
            {
                var item = Model.Items[i];

                <article class="basket-items row">
                    <section class="basket-item basket-item--middle col-lg-3 hidden-lg-down">
                        <img class="basket-image" src="@item.ThumbnailPhotoUrl" />
                    </section>
                    <section class="basket-item basket-item--middle col-3">@item.ProductName</section>
                    <section class="basket-item basket-item--middle col-2">$ @item.UnitPrice.ToString("N2")</section>
                    <section class="basket-item basket-item--middle col-2">
                        <input type="hidden" name="@("quantities[" + i +"].Key")" value="@item.Id" />
                        <input type="number" class="basket-input" min="1" name="@("quantities[" + i +"].Value")" value="@item.Quantity" />
                    </section>
                    <section class="basket-item basket-item--middle basket-item--mark col-2">$ @Math.Round(item.Quantity * item.UnitPrice, 2).ToString("N2")</section>
                </article>

                <div class="basket-items--border row">
                    @if (item.OldUnitPrice != 0)
                    {
                        <div class="alert alert-warning basket-margin12" role="alert">&nbsp;Note that the price of this article changed in our Catalog. The old price when you originally added it to the basket was $ @item.OldUnitPrice </div>
                    }
                </div>
                <br />
            }

            <div class="container">
                <article class="basket-titles basket-titles--clean row">
                    <section class="basket-title col-10"></section>
                    <section class="basket-title col-2">Total</section>
                </article>

                <article class="row">
                    <section class="basket-item col-10"></section>
                    <section class="basket-item basket-item--mark col-2">$ @Model.Total.ToString("N2")</section>
                </article>

                <div class="align-middle">
                    <button class="btn btn-secondary basket-checkout" name="name" value="" type="submit">Update</button>
                    <button type="submit" class="btn btn-primary basket-checkout" value="Checkout" name="action">Checkout</button>
                </div>
            </div>
        </form>
    }
</div>