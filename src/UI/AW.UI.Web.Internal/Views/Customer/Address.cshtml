@{
    ViewData["Title"] = $"Add address - {Model.CustomerName}";
    @model EditCustomerAddressViewModel;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.AccountNumber)

<h2>Add new address</h2>
<div class="form-horizontal detail">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.AddressType, new { @class = "control-label" })
        @if (Model.IsNewAddress)
        {
            @Html.DropDownListFor(m => m.CustomerAddressViewModel.AddressType, Model.AddressTypes, null, new { @class = "form-control" })
        }
        else
        {
            @Html.DropDownListFor(m => m.CustomerAddressViewModel.AddressType, Model.AddressTypes, null, new { @disabled = "disabled", @class = "form-control" })
            @Html.HiddenFor(m => m.CustomerAddressViewModel.AddressType)
        }

        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.AddressType, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.AddressLine1, new { @class = "control-label" })
        <input asp-for="CustomerAddressViewModel.Address.AddressLine1" class="form-control" />
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.AddressLine1, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.AddressLine2, new { @class = "control-label" })
        <input asp-for="CustomerAddressViewModel.Address.AddressLine2" class="form-control" />
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.AddressLine2, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.PostalCode, new { @class = "control-label" })
        <input asp-for="CustomerAddressViewModel.Address.PostalCode" class="form-control" />
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.PostalCode, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.City, new { @class = "control-label" })
        <input asp-for="CustomerAddressViewModel.Address.City" class="form-control" />
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.City, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.StateProvince.CountryRegion.CountryRegionCode, new { @class = "control-label" })
        @Html.DropDownListFor(m => m.CustomerAddressViewModel.Address.StateProvince.CountryRegion.CountryRegionCode, Model.Countries, null, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.StateProvince.CountryRegion.CountryRegionCode, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CustomerAddressViewModel.Address.StateProvince.StateProvinceCode, new { @class = "control-label" })
        @Html.DropDownListFor(m => m.CustomerAddressViewModel.Address.StateProvince.StateProvinceCode, Model.StateProvinces, null, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.CustomerAddressViewModel.Address.StateProvince.StateProvinceCode, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Update" class="btn btn-primary" />
            @Html.ActionLink("Cancel", "Detail", new { Model.AccountNumber }, new { @class = "btn btn-default" })
        </div>
    </div>
</div>
}

@section scripts
{
    <script>
        $(document).ready(function () {
            $('#CustomerAddressViewModel_Address_StateProvince_CountryRegion_CountryRegionCode').change(function () {
                var dropdown = $('#CustomerAddressViewModel_Address_StateProvince_StateProvinceCode');
                
                if (this.value == "--Select--") {
                    dropdown.empty();
                    dropdown.prop('disabled', true);
                }
                else {
                    dropdown.prop('disabled', false);
                    getStateProvinces(this.value, dropdown, "@Url.Action("GetStateProvinces", new { country = "js-country" })"
                        .replace("js-country", this.value)
                    );
                        
                    //$('#country-dropdown').val(this.value).change();
                }
            });

            //$('#AddressViewModel_Address_Country').change();
        });
    </script>
}